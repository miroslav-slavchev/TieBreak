name: Playwright .NET Tests

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  test-inventory:
    runs-on: ubuntu-latest
    permissions: write-all # Permissions needed for checkout and artifact upload
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Perform a full clone to prevent git errors (exit code 128)

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release

      - name: Install Playwright CLI
        run: |
          dotnet tool install --global Microsoft.Playwright.CLI
          playwright install --with-deps

      - name: Create test_results folder for Inventory Tests
        run: mkdir -p test_results

      - name: Run Inventory Tests and generate TRX report
        # Filter tests by namespace starting with 'SwagLabs.Tests.InventoryItems'
        # Output to a specific file name in the test_results directory
        run: dotnet test ./SwagLabs.Tests/SwagLabs.Tests.csproj --logger "trx;LogFileName=results-inventory.trx" --results-directory test_results --filter "FullyQualifiedName~SwagLabs.Tests.InventoryItems"

      - name: Upload Inventory TRX Report
        uses: actions/upload-artifact@v4
        if: always() # Upload even if tests fail
        with:
          name: Inventory-TRX-Report # Unique name for this artifact
          path: test_results/results-inventory.trx
          if-no-files-found: ignore # Ignore if no report is found (e.g., if tests couldn't run)

  test-shopping-cart:
    runs-on: ubuntu-latest
    permissions: write-all # Permissions needed for checkout and artifact upload
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Perform a full clone to prevent git errors (exit code 128)

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release

      - name: Install Playwright CLI
        run: |
          dotnet tool install --global Microsoft.Playwright.CLI
          playwright install --with-deps

      - name: Create test_results folder for Shopping Cart Tests
        run: mkdir -p test_results

      - name: Run Shopping Cart Tests and generate TRX report
        # Filter tests by namespace starting with 'SwagLabs.Tests.ShoppingCartTests'
        # Output to a specific file name in the test_results directory
        run: dotnet test ./SwagLabs.Tests/SwagLabs.Tests.csproj --logger "trx;LogFileName=results-shopping-cart.trx" --results-directory test_results --filter "FullyQualifiedName~SwagLabs.Tests.ShoppingCartTests"

      - name: Upload Shopping Cart TRX Report
        uses: actions/upload-artifact@v4
        if: always() # Upload even if tests fail
        with:
          name: ShoppingCart-TRX-Report # Unique name for this artifact
          path: test_results/results-shopping-cart.trx
          if-no-files-found: ignore # Ignore if no report is found (e.g., if tests couldn't run)

  combine-and-report:
    runs-on: ubuntu-latest
    # This job will only run after both parallel test jobs have completed
    needs: [test-inventory, test-shopping-cart]
    permissions: write-all # Needed to download artifacts and upload the combined report
    steps:
      - name: Download all TRX reports
        uses: actions/download-artifact@v4
        with:
          # Download artifacts from all previous jobs that produced them.
          # The path argument specifies the directory where artifacts will be downloaded.
          path: all-test-results

      - name: List downloaded files (for debugging)
        # This step helps verify that the TRX files were downloaded correctly
        run: |
          echo "Listing contents of downloaded artifacts directory:"
          ls -R all-test-results || echo "No artifacts downloaded."
          find all-test-results -name "*.trx" -type f || echo "No .trx files found in downloaded artifacts."

      - name: Consolidate TRX reports
        # When downloading multiple artifacts, they are placed in subdirectories.
        # This step moves all .trx files into a single flat directory for easier processing.
        run: |
          mkdir -p combined_trx_reports
          find all-test-results -name "*.trx" -exec cp {} combined_trx_reports/ \;
          echo "Listing consolidated TRX reports:"
          ls -la combined_trx_reports/ || echo "No consolidated TRX reports found."

      - name: Install ReportUnit for HTML conversion
        # Install the ReportUnit tool globally to convert TRX to HTML
        run: |
          dotnet tool install -g ReportUnit

      - name: Convert Consolidated TRX to HTML
        # Use ReportUnit to convert the consolidated TRX files into a single HTML report
        run: |
          ReportUnit -i combined_trx_reports/*.trx -o combined_trx_reports/combined-results.html
          echo "Listing generated HTML report:"
          ls -la combined_trx_reports/ || echo "HTML report not found."


      - name: Generate GitHub Checks Report (dorny/test-reporter)
        uses: dorny/test-reporter@v1
        if: always() # Run even if previous steps fail, to get a report of what happened
        with:
          name: Combined Test Results (GitHub Checks)
          # Point to the consolidated directory where all .trx files are now flat.
          path: combined_trx_reports/*.trx
          reporter: dotnet-trx
          # Removed 'output-to' as it's not a supported parameter for this action.
          # This action primarily creates a report visible in the GitHub 'Checks' tab.

      - name: Upload Combined HTML Report
        uses: actions/upload-artifact@v4
        if: always() # Upload the artifact even if the conversion step had issues
        with:
          name: NUnit Combined HTML Report # Name for the final combined report artifact
          # Path to the generated combined HTML file in the consolidated directory.
          path: combined_trx_reports/combined-results.html
          if-no-files-found: error # Fail the job if the combined HTML report isn't found
